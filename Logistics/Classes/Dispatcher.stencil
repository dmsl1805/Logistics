// swiftlint:disable superfluous_disable_command
// swiftlint:disable trailing_newline
// swiftlint:disable file_length
// swiftlint:disable line_length
import Logistics
import RxSwift

{% for type in types.implementing.Dispatcher|struct %}
{% if type.accessLevel == "public" %}public {% endif %}extension {{ type.name }} {
    typealias StateObserver = (ObservableState, DisposeBag) -> Void
    typealias ActionObserver = (ObservableAction, DisposeBag) -> Void

    {% for state in type.containedTypes where state.localName == "State" %}
    struct ObservableState {
        private let state: State

        fileprivate init(state: State) {
            self.state = state
        }
            {% for var in state.variables %}

        {% if type.accessLevel == "public" %}public {% endif %}var {{ var.name }}: Observable<{% for t in var.typeName.generic.typeParameters %}{{ t.typeName.name }}{% endfor %}> {
            return state.{{ var.name }}.asObservable()
        }
            {% endfor %}
    }

    struct MutableState {
        private let state: State

        fileprivate init(state: State) {
            self.state = state
        }
        {% for var in state.variables %}

        var {{ var.name }}: SafeObserver<{% for t in var.typeName.generic.typeParameters %}{{ t.typeName.name }}{% endfor %}> {
            return SafeObserver(state.{{ var.name }}.asObserver())
        }
        {% endfor %}
    }
    {% endfor %}
    {% for action in type.containedTypes where action.localName == "Action" %}

    struct ObservableAction {
        private let action: Action

        fileprivate init(action: Action) {
            self.action = action
        }
        {% for var in action.variables %}

        var {{ var.name }}: Observable<{% for t in var.typeName.generic.typeParameters %}{{ t.typeName.name }}{% endfor %}> {
            return action.{{ var.name }}.asObservable()
        }
        {% endfor %}
    }

    struct MutableAction {
        private let action: Action

        fileprivate init(action: Action) {
            self.action = action
        }
        {% for var in action.variables %}

        {% if type.accessLevel == "public" %}public {% endif %}var {{ var.name }}: SafeObserver<{% for t in var.typeName.generic.typeParameters %}{{ t.typeName.name }}{% endfor %}> {
            return SafeObserver(action.{{ var.name }}.asObserver())
        }
        {% endfor %}
    }
    {% endfor %}

    struct StateDispatcher {
        private let dispatcher: {{ type.name }}
        {% if type.accessLevel == "public" %}public {% endif %}let state: ObservableState
        {% if type.accessLevel == "public" %}public {% endif %}let action: MutableAction

        fileprivate init(dispatcher: {{ type.name }}) {
            self.dispatcher = dispatcher
            state = dispatcher.observableState
            action = dispatcher.mutableAction
        }
    }

    struct ActionDispatcher {
        private let dispatcher: {{ type.name }}
        let state: MutableState
        let action: ObservableAction

        fileprivate init(dispatcher: {{ type.name }}) {
            self.dispatcher = dispatcher
            state = dispatcher.mutableState
            action = dispatcher.observableAction
        }
    }

    func binded(with observer: StateObserver) -> Self {
        observer(observableState, bag)
        return self
    }

    func binded(with observer: ActionObserver) -> Self {
        observer(observableAction, bag)
        return self
    }

    var observableState: ObservableState {
        return ObservableState(state: state)
    }
    var mutableState: MutableState {
        return MutableState(state: state)
    }
    var observableAction: ObservableAction {
        return ObservableAction(action: action)
    }
    var mutableAction: MutableAction {
        return MutableAction(action: action)
    }
    var stateDispatcher: StateDispatcher {
        return StateDispatcher(dispatcher: self)
    }
    var actionDispatcher: ActionDispatcher {
        return ActionDispatcher(dispatcher: self)
    }
}
{% if not forloop.last %}

{% endif %}
{% endfor %}
